<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">

    <title>Home</title>
    <style>
        .chatbox   {
            outline: 1px solid darkgrey;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <h1 class="mt-3">Простой пример чата на GO</h1>
        <hr>
    </div>
    <span class="border-top"></span>
    <div class="row">
        <div class="col-md-6">
            <h3>Сообщения</h3>
            <div class="form-group">
                <label for="username">Пользователь:</label>
                <input type="text" name="username" id="username" class="form-control" autocomplete="off">
            </div>

            <div class="form-group">
                <label for="message">Сообщение:</label>
                <input type="text" name="message" id="message" class="form-control" autocomplete="off">
            </div>
            <hr>
            <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Отправить сообщение</a>
            <input type="hidden" name="action" id="action">
            <div id="status" class="mt-2 float-end">

            </div>
            <hr>
            <div id="output" class="chatbox"></div>

        </div>
        <div class="col-md-4">
            <h3>Пользователи в сети</h3>
            <ul id="online_users">

            </ul>
        </div>
    </div>


</div>

</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"></script>
<script src="/static/js/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;

    let output = document.getElementById("output")
    let userField = document.getElementById("username")
    let msgField = document.getElementById("message")

    window.onbeforeunload = function() {
        let jsonData = {};
        console.log("Leaving connection")
        jsonData["action"] = "leaving";
        socket.send(JSON.stringify(jsonData));
    }



    document.addEventListener("DOMContentLoaded", function (){
        socket = new ReconnectingWebSocket("ws://127.0.0.1:5555/ws", null, {debug: true, reconnectInterval: 3000});

        const offline = `<span class="badge bg-danger">Отсутствует подключение</span>`
        const online = `<span class="badge bg-success">Подключено</span>`
        let statusDiv = document.getElementById("status");

        socket.onopen = () => {
            console.log("Connected");
            statusDiv.innerHTML = online;
        }
        socket.onclose = () => {
            console.log("Conn close");
            statusDiv.innerHTML = offline;
        }
        socket.onerror = error => {
            console.log("Error ", error)
        }
        socket.onmessage = msg => {
            let parse = JSON.parse(msg.data)
            console.log(parse)

            switch (parse.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (parse.connected_users.length > 0) {
                        parse.connected_users.forEach(function (item){
                            let li = document.createElement("li")
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li);
                        })
                    }
                    break;
                case "broadcast":
                    output.innerHTML = output.innerHTML + parse.message + "<br>";
                    break;
            }
        }


        userField.addEventListener("change", function (){
            let jsonData = {};
            jsonData["action"] = "username"
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData))
        })
        msgField.addEventListener("keydown", function(event) {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("not connect");
                    return false
                }
                if ((userField.value === "") || (msgField.value === "")) {
                    alert("Нельзя отправить пустое сообщение")
                    return false

                } else {
                    sendMessage()
                }
                event.preventDefault();
                event.stopPropagation();
            }
        })
        document.getElementById("sendBtn").addEventListener("click", function(){
            if ((userField.value === "") || (msgField.value === "")) {
                alert("Нельзя отправить пустое сообщение")
                return false

            } else {
                sendMessage()
            }
        })


    })
    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = userField.value;
        jsonData["message"] = msgField.value;
        socket.send(JSON.stringify(jsonData))
        msgField.value = "";
    }
</script>
</html>